import type { Metadata } from 'next'
import './globals.css'
import { Inter } from 'next/font/google'
import ClientLayout from './client-layout'
import AuthCheck from "@/app/components/auth-check"
import { db } from './firebase/config'
import { auth } from './firebase/config'
const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: '呑恋 -nomikoi-',
  description: 'Generated by create next app',
  icons: {
    icon: '/favicon.ico',
  },
}

import { redirect } from 'next/navigation'
import { cookies } from 'next/headers'
import { adminAuth } from './firebase/admin'
import { getDoc, doc } from 'firebase/firestore'

async function getProfileStatus() {
  console.log('=== layout プロフィール状態の取得 ===')
  const cookieStore = cookies()
  const sessionCookie = cookieStore.get('session')

  if (!sessionCookie) {
    return null
  }

  try {
    const decodedToken = await adminAuth.verifySessionCookie(sessionCookie.value)
    const userDoc = await getDoc(doc(db, 'users', decodedToken.uid))
    
    if (!userDoc.exists()) {
      return 'unregistered'
    }

    const userData = userDoc.data()
    const profileCompleted = userData.profileCompleted
    const wayOfDrinking = userData.answers?.way_of_drinking || []
    const favoriteAlcohol = userData.answers?.favorite_alcohol || []

    console.log('profileCompleted', profileCompleted)
    console.log('wayOfDrinking', wayOfDrinking)
    console.log('favoriteAlcohol', favoriteAlcohol)

    if (!profileCompleted) {
      return 'caution'
    }
    if (wayOfDrinking.length === 0) {
      return 'way_of_drinking'
    }
    if (favoriteAlcohol.length === 0) {
      return 'favorite_drinking'
    }
    return 'home'

  } catch (error) {
    console.error('プロフィール状態の取得に失敗:', error)
    return null
  }
}

async function redirectBasedOnProfile() {
  const status = await getProfileStatus()
  const currentPath = window.location.pathname

  switch (status) {
    case 'unregistered':
      if (currentPath !== '/signup') redirect('/signup')
      break
    case 'caution':
      if (currentPath !== '/caution') redirect('/caution')
      break
    case 'way_of_drinking':
      if (currentPath !== '/way_of_drinking') redirect('/way_of_drinking')
      break
    case 'favorite_drinking':
      if (currentPath !== '/favorite_drinking') redirect('/favorite_drinking')
      break
    case 'home':
      if (currentPath === '/caution' || 
          currentPath === '/way_of_drinking' || 
          currentPath === '/favorite_drinking') {
        redirect('/home')
      }
      break
  }
}

export default async function RootLayout({children,}: Readonly<{children: React.ReactNode}>) {
  // ここでプロフィール状態をチェックし、必要に応じてリダイレクト
  await redirectBasedOnProfile();

  return (
    <html lang="ja">
      <body className={`${inter.className} default-bg overscroll-none`}>
        <AuthCheck>
          <ClientLayout>{children}</ClientLayout>
        </AuthCheck>
      </body>
    </html>
  )
}

